package vista;

import coneccion.Conexion;
import java.awt.Dimension;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author User
 */
public class InterFacturacion extends javax.swing.JInternalFrame {
     private Object[] columnasTabla = {"Producto", "Cantidad", "Precio", "Subtotal"};

private DefaultTableModel modeloTabla;
    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(600,600));
        this.setTitle("Boleta");
        this.CargarClientes();
        this.CargarProductos();
       modeloTabla = new DefaultTableModel();
        modeloTabla.setColumnIdentifiers(columnasTabla);

        // Asignar el modelo a la tabla
        jTable1.setModel(modeloTabla);

        // Asignar las columnas al modelo de la tabla
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        boxCliente = new javax.swing.JComboBox<>();
        boxProducto = new javax.swing.JComboBox<>();
        textCantidad = new javax.swing.JTextField();
        botonAgregarProducto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        textoTotal = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        laberl_wallpapaer = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Boleta");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 80, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 42, 80, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, 20));

        boxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccion cliente:", "Item 1", "Item 2", "Item 3", "Item 4" }));
        boxCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxClienteActionPerformed(evt);
            }
        });
        getContentPane().add(boxCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 130, -1));

        boxProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccion Producto:", "Item 2", "Item 3", "Item 4" }));
        boxProducto.setPreferredSize(new java.awt.Dimension(155, 22));
        getContentPane().add(boxProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 130, -1));

        textCantidad.setPreferredSize(new java.awt.Dimension(100, 40));
        getContentPane().add(textCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 85, 110, 30));

        botonAgregarProducto.setText("Agregar Productos");
        botonAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarProductoActionPerformed(evt);
            }
        });
        getContentPane().add(botonAgregarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, 120, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 340, 170));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 540, 200));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Total a pagar :");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 50, -1));

        textoTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoTotalActionPerformed(evt);
            }
        });
        jPanel2.add(textoTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 370, 360, 60));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Registrar Venta");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 170, 80));
        getContentPane().add(laberl_wallpapaer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boxClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxClienteActionPerformed

    private void botonAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarProductoActionPerformed
    String productoSeleccionado = (String) boxProducto.getSelectedItem();

        // Verificar si se ha seleccionado un producto
        if ("Seleccion Producto:".equals(productoSeleccionado)) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener la cantidad ingresada
        String cantidadTexto = textCantidad.getText().trim();

        // Verificar si se ha ingresado una cantidad válida
        if (cantidadTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese la cantidad", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    try {
        // Convertir la cantidad a un valor numérico
        int cantidad = Integer.parseInt(cantidadTexto);

        // Obtener el precio del producto
        double precio = obtenerPrecioProducto(productoSeleccionado);

        // Calcular el subtotal
        double subtotal = cantidad * precio;

        // Reducir el stock en la base de datos
        reducirStock(productoSeleccionado, cantidad);

        // Agregar la información a la tabla
        modeloTabla.addRow(new Object[]{productoSeleccionado, cantidad, precio, subtotal});

        // Calcular la suma de los subtotales y mostrarlo en el campo de texto
        double sumaSubtotales = calcularSumaSubtotales();
        textoTotal.setText(String.valueOf(sumaSubtotales));

    } catch (NumberFormatException e) {
        // Manejar el caso en el que la cantidad no sea un número válido
        JOptionPane.showMessageDialog(this, "La cantidad debe ser un número entero", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Método para reducir el stock en la base de datos
private void reducirStock(String nombreProducto, int cantidad) {
    try {
        Connection con = Conexion.conectar();

        // Obtener el stock actual del producto
        int stockActual = obtenerStockProducto(nombreProducto);

        // Verificar si hay suficiente stock para reducir
        if (stockActual >= cantidad) {
            // Calcular el nuevo stock después de la reducción
            int nuevoStock = stockActual - cantidad;

            // Actualizar el stock en la base de datos
            String sql = "UPDATE libros SET stock = ? WHERE nombre = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setInt(1, nuevoStock);
            pst.setString(2, nombreProducto);
            pst.executeUpdate();

            // Cerrar recursos
            pst.close();
            con.close();
        } else {
            JOptionPane.showMessageDialog(this, "No hay suficiente stock disponible", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

}

// Método para calcular la suma de los subtotales en la tabla
private double calcularSumaSubtotales() {
    double suma = 0.0;

    // Obtener el número de filas en la tabla
    int rowCount = modeloTabla.getRowCount();

    // Iterar a través de las filas y sumar los subtotales
    for (int i = 0; i < rowCount; i++) {
        double subtotal = (double) modeloTabla.getValueAt(i, 3); // 3 es la columna del subtotal
        suma += subtotal;
    }

    return suma;

    



}

// Método para obtener el stock de un producto desde la base de datos
private int obtenerStockProducto(String nombreProducto) {
    int stock = 0;

    try {
        Connection con = Conexion.conectar();
        String sql = "SELECT stock FROM libros WHERE nombre = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, nombreProducto);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            stock = rs.getInt("stock");
        }

        rs.close();
        pst.close();
        con.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return stock;
    

    }//GEN-LAST:event_botonAgregarProductoActionPerformed

    private void textoTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoTotalActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Obtener el cliente seleccionado
    String clienteSeleccionado = (String) boxCliente.getSelectedItem();

    // Verificar si se ha seleccionado un cliente
    if ("Seleccion cliente:".equals(clienteSeleccionado)) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Crear un nombre para el archivo basado en el nombre del cliente y la fecha actual
        String nombreArchivo = clienteSeleccionado + "_boleta_" + System.currentTimeMillis() + ".txt";

        // Obtener el PrintWriter para escribir en el archivo
        PrintWriter writer = new PrintWriter(nombreArchivo);

        // Obtener información del cliente desde la base de datos
        String apellidoCliente = obtenerApellidoCliente(clienteSeleccionado);
        String correoCliente = obtenerCorreoCliente(clienteSeleccionado);

        // Escribir información del cliente en el archivo
        writer.println("Cliente: " + clienteSeleccionado + " " + apellidoCliente);
        writer.println("Correo: " + correoCliente);
        writer.println("Fecha: " + new Date()); // Puedes cambiar esto según tus necesidades
        writer.println("Productos:");

        // Iterar a través de las filas de la tabla y escribir la información
        int rowCount = modeloTabla.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String producto = (String) modeloTabla.getValueAt(i, 0);
            int cantidad = (int) modeloTabla.getValueAt(i, 1);
            double precio = (double) modeloTabla.getValueAt(i, 2);
            double subtotal = (double) modeloTabla.getValueAt(i, 3);

            // Modificar el formato de la línea del producto para incluir precio, cantidad y total
            writer.println(" - Producto: " + producto);
            writer.println("   Cantidad: " + cantidad);
            writer.println("   Precio unitario: " + precio);
            writer.println("   Total: " + subtotal);
        }

        // Cerrar el PrintWriter
        writer.close();

        // Mostrar mensaje de éxito
        JOptionPane.showMessageDialog(this, "Boleta guardada correctamente en " + nombreArchivo, "Éxito", JOptionPane.INFORMATION_MESSAGE);

    } catch (FileNotFoundException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al guardar la boleta", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton4ActionPerformed
// Método para obtener el precio de un producto desde la base de datos
    private String obtenerApellidoCliente(String nombreCliente) {
    String apellido = ""; // Valor predeterminado si no se puede obtener el apellido

    try {
        Connection con = Conexion.conectar();
        String sql = "SELECT apellido FROM clientes WHERE nombre = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, nombreCliente);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            apellido = rs.getString("apellido");
        }

        rs.close();
        pst.close();
        con.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return apellido;
}

// Método para obtener el correo del cliente desde la base de datos
private String obtenerCorreoCliente(String nombreCliente) {
    String correo = ""; // Valor predeterminado si no se puede obtener el correo

    try {
        Connection con = Conexion.conectar();
        String sql = "SELECT correo FROM clientes WHERE nombre = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, nombreCliente);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            correo = rs.getString("correo");
        }

        rs.close();
        pst.close();
        con.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return correo;
}
private double obtenerPrecioProducto(String nombreProducto) {
    double precio = 0.0;

    try {
        Connection con = Conexion.conectar();
        String sql = "SELECT precio FROM libros WHERE nombre = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, nombreProducto);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            // Obtener el precio directamente como double
            precio = rs.getDouble("precio");
        }

        rs.close();
        pst.close();
        con.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return precio;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAgregarProducto;
    private javax.swing.JComboBox<String> boxCliente;
    private javax.swing.JComboBox<String> boxProducto;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel laberl_wallpapaer;
    private javax.swing.JTextField textCantidad;
    private javax.swing.JTextField textoTotal;
    // End of variables declaration//GEN-END:variables
//metodo para cargar clientes en el combobox;
    private void CargarClientes(){
 try {
    Connection con = Conexion.conectar();
    String sql = "SELECT * FROM clientes";
    PreparedStatement pst = con.prepareStatement(sql);
    ResultSet rs = pst.executeQuery();

    // Limpiar el JComboBox antes de agregar nuevos elementos
    boxCliente.removeAllItems();

    while (rs.next()) {
        // Agregar solo el nombre al JComboBox
        boxCliente.addItem(rs.getString("nombre"));
    }

    rs.close();
    pst.close();
    con.close();
} catch (SQLException e) {
    e.printStackTrace();
}

    }
    
       private void CargarProductos(){
 try {
    Connection con = Conexion.conectar();
    String sql = "SELECT * FROM libros";
    PreparedStatement pst = con.prepareStatement(sql);
    ResultSet rs = pst.executeQuery();

    // Limpiar el JComboBox antes de agregar nuevos elementos
    boxProducto.removeAllItems();

    while (rs.next()) {
        // Agregar solo el nombre al JComboBox
        boxProducto.addItem(rs.getString("nombre"));
    }

    rs.close();
    pst.close();
    con.close();
} catch (SQLException e) {
    e.printStackTrace();
}

    }

}
