/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import coneccion.Conexion;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.PreparedStatement;

/**
 *
 * @author User
 */
public class interno2 extends javax.swing.JInternalFrame {
    private int idUsuario;
    /**
     * Creates new form inter2
     */
    public interno2() {
        initComponents();
        this.CargarTablaUsuarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        descrip = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Usuarios");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scroll.setViewportView(tablaUsuarios);

        jPanel1.add(scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 220, 140));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 250, 160));

        jButton1.setText("jButton1");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, -1, -1));

        jButton2.setText("jButton2");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, -1, -1));

        descrip.setText("jTextField1");
        getContentPane().add(descrip, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 170, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField descrip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane scroll;
    public static javax.swing.JTable tablaUsuarios;
    // End of variables declaration//GEN-END:variables

    //metodo para mostrar los usuarios en la tabla;
    
    private void CargarTablaUsuarios(){
    
 
    DefaultTableModel modelo = new DefaultTableModel();

    try (Connection con = Conexion.conectar()) {
        if (con != null) {
            String sql = "SELECT * FROM empleados";
            try (Statement st = con.createStatement();
                 ResultSet rs = st.executeQuery(sql)) {

                // Agrega las columnas a tu modelo de tabla
                modelo.addColumn("ID");
                modelo.addColumn("Usuario");
                modelo.addColumn("Password");

                // Itera a través del resultado y agrega filas a la tabla
                while (rs.next()) {
                    Object[] fila = new Object[3];
                    for (int i = 0; i < 3; i++) {
                        fila[i] = rs.getObject(i + 1);
                    }

                    modelo.addRow(fila);
                }

                // Asigna el modelo de tabla a tu componente JTable
                tablaUsuarios.setModel(modelo);
            }
        }
    } catch (SQLException e) {
        System.out.println("Error al llenar la tabla de usuarios: " + e);
    }
    
    tablaUsuarios.addMouseListener(new MouseAdapter() {
    @Override
    public void mouseClicked(MouseEvent e) {
        int fila = tablaUsuarios.rowAtPoint(e.getPoint());
        int columna = 0; // Suponemos que la primera columna contiene el ID del usuario.

        if (fila > -1) {
            int idUsuario = (int) modelo.getValueAt(fila, columna);
            EnviarDatosUsuariosSeleccionados(idUsuario);
        }
    }
});

}
    private void EnviarDatosUsuariosSeleccionados(int idUsuario) {
    try {
        Connection con = Conexion.conectar();
        String sql = "SELECT * FROM empleados WHERE id = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setInt(1, idUsuario); // Establece el valor del parámetro en la consulta

        // Ejecuta la consulta
        ResultSet rs = pst.executeQuery();

        // Ahora puedes trabajar con el resultado (rs) para obtener los datos del usuario
        while (rs.next()) {
         descrip.setText(rs.getString("usuario"));
            // Realiza las acciones necesarias con los datos obtenidos
            // Por ejemplo, muestra los datos en la interfaz o realiza otras operaciones.
        }

        // Cierra los recursos
        rs.close();
        pst.close();
        con.close();
    } catch (SQLException e) {
        // Maneja cualquier excepción de SQL aquí
        e.printStackTrace();
    }
}


}

